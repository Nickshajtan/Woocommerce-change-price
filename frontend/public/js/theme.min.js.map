{"version":3,"names":[],"mappings":"","sources":["theme.min.js"],"sourcesContent":["document.addEventListener(\"DOMContentLoaded\", () => {\r\n  try {\r\n    \r\n    const CONTAINER   = document.getElementById('techno-container');\r\n    const SLIDE_CLASS = 'techologies-content__icon-wrapper';\r\n    \r\n    let singleSlide   = 'content-slider__slide-wrapper';\r\n    let singleSlideIt = 'content-slider__item';\r\n    \r\n    if( is_func( jQuery ) ) {\r\n      var $ = jQuery;\r\n    }\r\n    else {\r\n      throw new Error('jQuery is not a function');\r\n    }\r\n    \r\n    let initFunc = () => {\r\n      switch(true){\r\n        case ( window.innerWidth > 768 ) :\r\n          destroySlideWrap( CONTAINER, SLIDE_CLASS, singleSlide, singleSlideIt );\r\n          destroySliderNav( CONTAINER );\r\n          break;\r\n        case ( window.innerWidth >= 320  && window.innerWidth <= 768 ) :\r\n          makeSlideWrap( CONTAINER, SLIDE_CLASS, singleSlide, singleSlideIt );\r\n          makeSliderNav( CONTAINER );\r\n          sliderInitialization(CONTAINER);\r\n          break;\r\n        case ( window.innerWidth < 320 ) :\r\n          destroySlideWrap( CONTAINER, SLIDE_CLASS, singleSlide, singleSlideIt );\r\n          destroySliderNav( CONTAINER );\r\n          break;\r\n        default:\r\n          destroySlideWrap( CONTAINER, SLIDE_CLASS, singleSlide, singleSlideIt );\r\n          destroySliderNav( CONTAINER );\r\n      }\r\n    };\r\n  \r\n    initFunc();\r\n    \r\n    window.onresize = () => {\r\n      slidersUnset();\r\n      setTimeout(function(){\r\n        initFunc();\r\n        sliderInitialization(CONTAINER);\r\n      }, 1000);\r\n    };\r\n  }\r\n  catch(e) {\r\n    console.log('Error with start loaded function: ' + e)\r\n  }\r\n});\r\n\r\n/*\r\n * Slick slider initialization function\r\n * @param container is object\r\n * @params toShow, toScroll are numbers\r\n *\r\n */\r\nvar sliderInitialization = ( container, toShow, toScroll ) => {\r\n  try {\r\n    if( window.innerWidth < 320 || window.innerWidth > 768 ) {\r\n      return false;\r\n    }\r\n    \r\n    if( !is_obj( container ) || is_null( container ) || is_empty( container ) ) {\r\n      throw new Error(container + ' has incorrect value, critical');\r\n      return false;\r\n    }\r\n    \r\n    const slidesToShow   = ( is_num( toShow ) ) ? toShow : 1;\r\n    const slidesToScroll = ( is_num( toScroll ) ) ? toScroll : 1;\r\n    \r\n    if( is_func( $ ) && is_func( $.fn.slick ) ) {\r\n      let dotsContainer = ( !is_empty( container.id ) ) ? $('#' + container.id).parent().find('#dots-container') :\r\n      ( isset( container.classList[0] ) && !is_empty( container.classList[0] ) ) ? $('.' + container.classList[0]).parent().find('#dots-container') : null;\r\n      \r\n      let args = {\r\n        accessibility: true,\r\n        autoplay:      true,\r\n        autoplaySpeed: 3000,\r\n        arrows:        false,\r\n        centerMode:    false,\r\n        centerPadding: '50px',\r\n        cssEase:       'ease',\r\n        dots:          true,\r\n        dotsClass:     'dots-nav',\r\n        easing:        'linear',\r\n        infinite:      true,\r\n        slidesToShow:  slidesToShow,\r\n        slidesToScroll:slidesToScroll,\r\n        mobileFirst:   true,\r\n        lazyLoad:      'progressive', \r\n      };\r\n      \r\n      if( !is_null( dotsContainer ) ) {\r\n        args['appendDots'] = dotsContainer;\r\n      }\r\n      \r\n      if( window.innerWidth > 574 && window.innerWidth < 768 ) {\r\n        let arwsContainer = ( !is_empty( container.id ) ) ? $('#' + container.id).parent().find('#arrows-container') :\r\n        ( isset( container.classList[0] ) && !is_empty( container.classList[0] ) ) ? $('.' + container.classList[0]).parent().find('#arrows-container') : null;\r\n        if( !is_null( arwsContainer ) ){\r\n          args['arrows'] = true;\r\n          args['appendArrows'] = arwsContainer; \r\n        }\r\n      }\r\n      else{\r\n        args['arrows'] = false;\r\n        delete( args.appendArrows );\r\n      }\r\n\r\n      let initializedSliders = document.querySelectorAll('.' + container.classList[0]);\r\n      for (var i = 0, len = initializedSliders.length; i < len; i++) {\r\n        if (!initializedSliders[i].matches('.slick-initialized')) {\r\n          if( is_obj( initializedSliders[i] ) && isset( initializedSliders[i].id ) ) {\r\n            $('#' + initializedSliders[i].id).slick(args);\r\n          }\r\n          else if( is_obj( initializedSliders[i] ) && isset( initializedSliders[i].classList[0] ) ) {\r\n            $('.' + initializedSliders[i].classList[0]).slick(args);\r\n          }\r\n          else {\r\n            throw new Error('Can not to get element data for initialize slick');\r\n          }\r\n        }\r\n      }\r\n    }\r\n    else{\r\n      if( !is_func( $ ) ){\r\n        throw new Error('jQuery $ is not defined, critical');\r\n      }\r\n      if( !is_func( $.fn.slick ) ){\r\n        throw new Error('Type of slick is not a function, critical');\r\n      }\r\n      else{\r\n        throw new Error('Error with slick dependencies');\r\n      }\r\n    }\r\n  }\r\n  catch(e) {\r\n    console.log('Error with slider initialization function: ' + e);\r\n  }\r\n};\r\n\r\n/*\r\n * Destroy slick slider function\r\n * @param container is object\r\n *\r\n */\r\nvar slidersUnset = () => {\r\n  try {\r\n    if( is_func( $ ) && is_func( $.fn.slick ) ) {\r\n      $('.slick-initialized').slick('unslick');\r\n    }\r\n    else {\r\n      if( !is_func( $ ) ){\r\n        throw new Error('jQuery $ is not defined, critical');\r\n      }\r\n      if( !is_func( $.fn.slick ) ){\r\n        throw new Error('Type of slick is not a function, critical');\r\n      }\r\n      else{\r\n        throw new Error('Error with slick dependencies');\r\n      }\r\n    }\r\n  }\r\n  catch(e) {\r\n    console.log('Error with slider unset function: ' + e);\r\n  }\r\n};\r\n\r\n/*\r\n * Build slider navigation\r\n * @param container is object\r\n *\r\n */\r\nvar makeSliderNav = ( container ) => {\r\n  try {\r\n    if( !is_obj( container ) || is_null( container ) || is_empty( container ) ) {\r\n      throw new Error(container + ' has incorrect value, critical');\r\n      return false;\r\n    }\r\n    \r\n    let dots      = null;\r\n    let arrows    = null;\r\n    let issetDots = container.parentNode.querySelectorAll('.dots-container');\r\n    if( !isset( issetDots ) || issetDots.length === 0 ) {\r\n      dots = document.createElement('div'); \r\n    }\r\n    \r\n    if( !is_null( dots ) ) {\r\n      dots.classList.add('dots-container');\r\n      dots.id = 'dots-container';\r\n      container.parentNode.appendChild(dots);\r\n    }\r\n    \r\n    if( window.innerWidth > 574 && window.innerWidth < 768 ) {\r\n      let issetArrows = container.parentNode.querySelectorAll('.arrows-container');\r\n\r\n      if( !isset( issetArrows ) || issetArrows.length === 0 ) {\r\n        arrows = document.createElement('div');\r\n      }\r\n      \r\n      if( !is_null( arrows ) ) {\r\n        arrows.classList.add('arrows-container');\r\n        arrows.id = 'arrows-container';\r\n        container.parentNode.appendChild(arrows);\r\n      }\r\n    }\r\n  }\r\n  catch(e) {\r\n    console.log('Error with slider nav making function: ' + e)\r\n  }\r\n};\r\n\r\n/*\r\n * Destroy slider navigation\r\n * @param container is object\r\n *\r\n */\r\nvar destroySliderNav = ( container ) => {\r\n  try {\r\n    if( !is_obj( container ) || is_null( container ) || is_empty( container ) ) {\r\n      throw new Error(container + ' has incorrect value, critical');\r\n      return false;\r\n    }\r\n    container.parentNode.querySelectorAll('.dots-container').forEach((el) => {\r\n        el.remove();\r\n    });\r\n    container.parentNode.querySelectorAll('.arrows-container').forEach((el) => {\r\n        el.remove();\r\n    });\r\n  }\r\n  catch(e) {\r\n    console.log('Error with slider nav destroying function: ' + e)\r\n  }\r\n};\r\n\r\n/*\r\n * Making single slides wrapping for mobile slider \r\n * @param container is object\r\n * @param itemClass is string\r\n * @param singleLiClass is string\r\n * @param singleUlClass is string\r\n *\r\n */\r\nvar makeSlideWrap = ( container, itemClass, singleLiClass, singleUlClass ) => {\r\n  try {\r\n    if( window.innerWidth > 768 ) {\r\n      destroySlideWrap();\r\n      return false;\r\n    }\r\n    if( !is_obj( container ) || is_null( container ) || is_empty( container ) ) {\r\n      throw new Error(container + ' has incorrect value, critical');\r\n      return false;\r\n    }\r\n    \r\n    let slideClass  = ( is_string(itemClass) ) ? itemClass : toString(itemClass);\r\n    let singleSlide = ( isset(singleLiClass) && !is_null(singleLiClass) && !is_empty(singleLiClass) ) \r\n                                                                    ? ( is_string( singleLiClass ) ) ? singleLiClass : toString(singleLiClass)\r\n                                                                    : '';\r\n    let singleItem  = ( isset(singleUlClass) && !is_null(singleUlClass) && !is_empty(singleUlClass) ) \r\n                                                                    ? ( is_string( singleUlClass ) ) ? singleUlClass : toString(singleUlClass) \r\n                                                                    : '';\r\n    let slides      = document.querySelectorAll('.' + slideClass);\r\n    let wrapper     = null;\r\n    let innerList   = null;\r\n    \r\n    if( is_string( singleSlide ) && !is_empty( singleSlide ) ) {\r\n      var issetSlides = container.querySelectorAll('.' + singleSlide);\r\n    }\r\n    else {\r\n      var issetSlides = container.querySelectorAll('.content-slider__slide-wrapper');\r\n    }\r\n    if( isset( issetSlides ) && issetSlides.length > 0 ) {\r\n      return false;\r\n    }\r\n    \r\n    if( !is_null( slides ) && is_obj( slides ) && !is_empty( slides ) ) {\r\n      slides.forEach((el, i) => {\r\n        if (i % 4 === 0) {\r\n          wrapper   = document.createElement('li');\r\n          wrapper.classList.add('content-slider__slide-wrapper');\r\n          if( isset( singleSlide ) && !is_null( singleSlide ) && !is_empty( singleSlide ) ) {\r\n            wrapper.classList.add(singleSlide); \r\n          }\r\n          innerList = document.createElement('ul');\r\n          innerList.classList.add('content-slider__item');\r\n          if( isset( singleUlClass ) && !is_null( singleUlClass ) && !is_empty( singleUlClass ) ) {\r\n            innerList.classList.add(singleUlClass);\r\n          }\r\n          container.appendChild(wrapper);\r\n          wrapper.appendChild(innerList);\r\n        }\r\n        el.classList.add('content-slider__icon');\r\n        innerList.appendChild(el);\r\n      });\r\n    }\r\n    else {\r\n      throw new Error('Can not to get a slides ' + slides + ' value, critical');\r\n      return false;\r\n    }\r\n    \r\n    container.classList.add('content-slider');\r\n    container.classList.add('techologies-content__slider');\r\n    container.classList.remove('techologies-content__grid');\r\n    \r\n  }\r\n  catch(e) {\r\n    console.log('Error with slides wraping function: ' + e)\r\n  }\r\n};\r\n\r\n/*\r\n * Destroy single slides wrapping for mobile slider \r\n * @param container is object\r\n * @param itemClass is string\r\n * @param singleLiClass is string\r\n * @param singleUlClass is string\r\n *\r\n */\r\nvar destroySlideWrap = ( container, itemClass, singleLiClass, singleUlClass ) => {\r\n  try {\r\n    if( window.innerWidth > 320 && window.innerWidth < 768 ) {\r\n      makeSlideWrap();\r\n      return false;\r\n    }\r\n    if( !is_obj( container ) || is_null( container ) || is_empty( container ) ) {\r\n      throw new Error(container + ' has incorrect value, critical');\r\n      return false;\r\n    }\r\n    \r\n    let slideClass  = ( is_string(itemClass) ) ? itemClass : toString(itemClass);\r\n    let slidesItem  = container.querySelectorAll('.' + slideClass);\r\n    let singleSlide = ( isset(singleLiClass) && !is_null(singleLiClass) && !is_empty(singleLiClass) ) \r\n                                                                    ? ( is_string( singleLiClass ) ) ? singleLiClass : toString(singleLiClass)\r\n                                                                    : '';\r\n    let singleItem  = ( isset(singleUlClass) && !is_null(singleUlClass) && !is_empty(singleUlClass) ) \r\n                                                                    ? ( is_string( singleUlClass ) ) ? singleUlClass : toString(singleUlClass) \r\n                                                                    : '';\r\n    \r\n    if( is_string( singleSlide ) && !is_empty( singleSlide ) ) {\r\n      var slides = container.getElementsByClassName(singleSlide);\r\n    }\r\n    else{\r\n      throw new Error(singleSlide  + ' has incorrect value for single slide class, critical ');\r\n      return false;\r\n    }\r\n    \r\n    if( isset( slides ) && slides.length === 0 ) {\r\n      return false;\r\n    }\r\n    \r\n    if( !is_null( slides ) && is_obj( slides ) && !is_empty( slides ) ) {\r\n      for (let slide of slides) {\r\n        if( !is_null( slide ) && is_obj( slide ) && !is_empty( slide ) ) {\r\n            let elements = slide.querySelectorAll('li');\r\n            if( !is_null( elements ) && is_obj( elements ) && !is_empty( elements ) ) {\r\n              for (let el of elements ) {\r\n                if( !is_null( el ) && is_obj( el ) && !is_empty( el ) ) {\r\n                  slide.parentNode.appendChild(el);\r\n                }\r\n                else {\r\n                  throw new Error('Can not to get a slide element ' + elements + ' value, critical');\r\n                }   \r\n              }\r\n              slide.parentNode.removeChild(slide);\r\n            }\r\n            else {\r\n              throw new Error('Can not to get a slide elements ' + elements + ' value, critical');\r\n            }   \r\n        }\r\n        else {\r\n          throw new Error('Can not to get a slide ' + slide  + ' value, critical');\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      throw new Error('Can not to get a slides ' + slides + ' value, critical');\r\n      return false;\r\n    }\r\n    container.classList.add('techologies-content__grid');\r\n    container.classList.remove('content-slider');\r\n    container.classList.remove('techologies-content__slider');\r\n    \r\n    if( !is_null( slidesItem ) && is_obj( slidesItem ) && !is_empty( slidesItem ) ) {\r\n      for( let item of slidesItem ) {\r\n        item.classList.remove('content-slider__icon');\r\n      }\r\n    }\r\n  }\r\n  catch(e) {\r\n    console.log('Error with slides unwraping function: ' + e)\r\n  }\r\n};\r\n"],"file":"theme.min.js"}